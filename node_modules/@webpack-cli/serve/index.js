"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const spawn = require("cross-spawn");
const inquirer = require("inquirer");
const path = require("path");
const resolve_packages_1 = require("@webpack-cli/utils/resolve-packages");
const webpack_scaffold_1 = require("@webpack-cli/webpack-scaffold");
const npmConfig = {
    installCmd: "install",
    dependency: "--save",
    devDependency: "--save-dev",
    optionalDependency: "--save-optional"
};
const yarnConfig = {
    installCmd: "add",
    dependency: " ",
    devDependency: "--save",
    optionalDependency: "--optional"
};
const spawnWithArg = (pm, cmd) => {
    const pmConfig = pm === "npm" ? npmConfig : yarnConfig;
    const options = [pmConfig.installCmd, "webpack-dev-server", pmConfig[cmd]];
    return spawn.sync(pm, options, { stdio: "inherit" });
};
/**
 *
 * Find the path of a given module
 *
 * @param {Object} dep - dependency to find
 * @returns {String} string with given path
 */
const getRootPathModule = (dep) => path.resolve(process.cwd(), dep);
/**
 *
 * Prompts for installing the devServer and running it
 *
 * @param {String[]} args - args processed from the CLI
 * @returns {Function} invokes the devServer API
 */
function serve() {
    const packageJSONPath = getRootPathModule("package.json");
    if (!packageJSONPath) {
        console.error("\n", chalk_1.default.red("✖ Could not find your package.json file"), "\n");
        process.exit(1);
    }
    // TODO: to refactor this dynamic require and use import()
    // eslint-disable-next-line
    const packageJSON = require(packageJSONPath);
    /*
     * We gotta do this, cause some configs might not have devdep,
     * dep or optional dep, so we'd need sanity checks for each
     */
    const hasDevServerDep = packageJSON
        ? Object.keys(packageJSON).filter((p) => packageJSON[p]["webpack-dev-server"])
        : [];
    if (hasDevServerDep.length) {
        const WDSPath = getRootPathModule("node_modules/webpack-dev-server/bin/webpack-dev-server.js");
        if (!WDSPath) {
            console.error("\n", chalk_1.default.red("✖ Could not find the webpack-dev-server dependency in node_modules root path"));
            console.info(chalk_1.default.bold.green(" ✔︎"), "Try this command:", chalk_1.default.bold.green("rm -rf node_modules && npm install"));
            process.exit(1);
        }
        return require(WDSPath);
    }
    else {
        process.stdout.write("\n" +
            chalk_1.default.bold("✖ We didn't find any webpack-dev-server dependency in your project,") +
            "\n" +
            chalk_1.default.bold.green("  'webpack serve'") +
            " " +
            chalk_1.default.bold("requires you to have it installed ") +
            "\n\n");
        return inquirer
            .prompt([
            {
                default: "Y",
                message: "Do you want to install it? (default: Y)",
                name: "confirmDevserver",
                type: "confirm"
            }
        ])
            .then((answer) => {
            if (answer.confirmDevserver) {
                return inquirer
                    .prompt(webpack_scaffold_1.List("confirmDepType", "What kind of dependency do you want it to be under? (default: devDependency)", ["devDependency", "optionalDependency", "dependency"]))
                    .then((depTypeAns) => {
                    const packager = getRootPathModule("package-lock.json") ? "npm" : "yarn";
                    let spawnAction;
                    spawnAction = () => spawnWithArg(packager, depTypeAns.confirmDepType);
                    return resolve_packages_1.processPromise(spawnAction()).then(() => {
                        // Recursion doesn't work well with require call being cached
                        delete require.cache[require.resolve(packageJSONPath)];
                        return serve();
                    });
                });
            }
            else {
                console.error(chalk_1.default.bold.red("✖ Serve aborted due cancelling"));
                process.exitCode = 1;
            }
        })
            .catch((err) => {
            console.error(chalk_1.default.red("✖ Serve aborted due to some errors"));
            console.error(err);
            process.exitCode = 1;
        });
    }
}
exports.default = serve;
